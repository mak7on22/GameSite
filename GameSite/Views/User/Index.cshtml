@model GameSite.Models.UserProfileViewModel
@{
    ViewData["Title"] = "Profile";
}

<h2>Profile</h2>
@if (Model?.User != null)
{
    if (!string.IsNullOrEmpty(Model.User.AvatarPath))
    {
        <img src="@Model.User.AvatarPath" alt="avatar" class="img-thumbnail mb-2" style="max-width:150px;" />
    }
    <p>
        UserName: @Model.User.UserName
        @{
            var color = Model.User.Status switch
            {
                GameSite.Models.UserStatus.Online => "status-online",
                GameSite.Models.UserStatus.DoNotDisturb => "status-dnd",
                _ => "status-offline"
            };
        }
        <span class="status-dot @color"></span>
    </p>
    <p>Your ID: @Model.User.UniqueId</p>
    <p>
        Email:
        @if (Model.IsSelf || Model.User.IsEmailPublic)
        {
            @Model.User.Email
        }
        else
        {
            <span>Hidden</span>
        }
    </p>
    <p>Balance: @Model.User.Balance.ToString("0") GameCoins</p>
    <p>XP: @Model.User.XP</p>
    <p>Rank: @Model.User.Rank</p>
    @if (Model.IsSelf)
    {
        <select id="status-select" class="form-select d-inline w-auto">
            <option value="@GameSite.Models.UserStatus.Online" selected="@(Model.User.Status == GameSite.Models.UserStatus.Online)">Online</option>
            <option value="@GameSite.Models.UserStatus.DoNotDisturb" selected="@(Model.User.Status == GameSite.Models.UserStatus.DoNotDisturb)">Do Not Disturb</option>
            <option value="@GameSite.Models.UserStatus.Offline" selected="@(Model.User.Status == GameSite.Models.UserStatus.Offline)">Offline</option>
        </select>
        <form asp-action="ToggleEmailVisibility" method="post" class="d-inline ms-2">
            <input type="hidden" name="isPublic" value="@(Model.User.IsEmailPublic ? "false" : "true")" />
            <button type="submit" class="btn btn-sm btn-secondary">@(Model.User.IsEmailPublic ? "Hide email" : "Show email")</button>
        </form>
        <button type="button" class="btn btn-sm btn-primary ms-2" data-bs-toggle="modal" data-bs-target="#friendModal">Find friends</button>
        <a asp-action="Edit" class="btn btn-primary ms-2">Edit profile</a>
    }
}

@if (Model?.Friends != null && Model.Friends.Any())
{
    <h4 class="mt-4">Friends</h4>
    <ul class="list-unstyled">
    @foreach (var f in Model.Friends)
    {
        <li class="mb-2">
            @if (!string.IsNullOrEmpty(f.FriendUser?.AvatarPath))
            {
                <img src="@f.FriendUser.AvatarPath" alt="avatar" width="40" height="40" class="rounded-circle me-2" />
            }
            <a asp-controller="User" asp-action="Details" asp-route-id="@f.FriendId">@f.FriendUser?.UserName</a>
            @{
                var color = f.FriendUser?.Status switch
                {
                    GameSite.Models.UserStatus.Online => "status-online",
                    GameSite.Models.UserStatus.DoNotDisturb => "status-dnd",
                    _ => "status-offline"
                };
            }
            <span class="status-dot @color"></span>
        </li>
    }
    </ul>
}

@if (Model?.Posts != null && Model.Posts.Any())
{
    <h4 class="mt-4">Posts</h4>
    @await Html.PartialAsync("_PostList", Model.Posts)
}

<div class="modal fade" id="friendModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Find Friend</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="search" id="friend-search" class="form-control" placeholder="Enter user id" autocomplete="off" />
                <div id="friend-search-results" class="list-group mt-2"></div>
            </div>
        </div>
    </div>
</div>
